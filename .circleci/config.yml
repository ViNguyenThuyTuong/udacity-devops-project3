version: 2.1

orbs:
  slack: circleci/slack@4.12.5

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id:
        type: string
      when:
        type: string
    steps:
      - run:
          name: Destroy udapeople backend stack
          when: << parameters.when>>
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          environment:
            TERM: xterm-256color
      - run:
          name: Destroy udapeople frontend stack and S3 bucket
          when: << parameters.when>>
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          environment:
              TERM: xterm-256color

  create-env:
    description: Create .env file
    steps:
      - run:
          name: Add env vars to .env file
          command: |
            echo ENVIRONMENT=production >> "./backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "./backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "./backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "./backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "./backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "./backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "./backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "./backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "./backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "./backend/.env"
            #echo NODE_ENV=production >> "./backend/.env"
            cat ./backend/.env
  
  revert-migrations:
    description: Revert the last migration if the job fail
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/6mg2XrhaS7eJnBfS4ShcFz/migration_<< parameters.id >>)
            if [[ $SUCCESS == 1 ]]
            then
              pwd
              ls -la
              echo 'start migrations:revert'
              npm run migrations:revert
              echo 'migrations:revert success'
            fi
            echo 'nothing to revert'
          when: << parameters.when >>

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          branch_pattern: .+
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1

  build-backend:
    docker:
      - image: node:13.8-buster
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          branch_pattern: .+
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [frontend-build]
      - run:
          name: Test Frontend
          command: |
            cd frontend
            npm run test
      - slack/notify:
          branch_pattern: .+
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [backend-build]
      - run:
          name: Test Backend
          command: |
            cd backend
            npm run test
      - slack/notify:
          branch_pattern: .+
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1

  scan-frontend:
    docker:
      - image: node:13.8-buster
    steps:
      - checkout
      - restore_cache: 
          keys: [frontend-build]
      - run:
          name: Validate Frontend
          command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              #npm audit --audit-level=critical
      - slack/notify:
          branch_pattern: .+
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1

  scan-backend:
    docker:
      - image: node:13.8-buster
    steps:
      - checkout
      - restore_cache: 
          keys: [backend-build]
      - run:
          name: Validate backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          branch_pattern: .+
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1

  deploy-infrastructure:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Install Tar since its a requesite 
            command: |
              yum -y install tar gzip jq git
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
                --tags project=udapeople
        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
                --tags project=udapeople
        - run:
            name: Add back-end ip to ansible inventory
            command: |
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
        - persist_to_workspace:
            root: .
            paths:
              - ./.circleci/ansible/inventory.txt
        - destroy-environment:
            id: ${CIRCLE_WORKFLOW_ID:0:7}
            when: on_fail

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d5:55:3b:b1:b3:f7:4c:bd:2e:a3:df:92:64:f3:44:77"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh-client tar gzip curl nodejs npm
            pip install awscli
            ansible --version
            cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production >> "./backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "./backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "./backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "./backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "./backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "./backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "./backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "./backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "./backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "./backend/.env"
            cat ./backend/.env
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook \
              -i .circleci/ansible/inventory.txt \
              .circleci/ansible/configure-server.yml
      # rollback on failure  
      - destroy-environment:
         id: ${CIRCLE_WORKFLOW_ID:0:7}
         when: on_fail
      - slack/notify:
          branch_pattern: .+
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1

  run-migrations:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: .
      - create-env
      - run:
          name: Run database migration
          no_output_timeout: 20m
          command: |
            cd backend
            pwd
            u=$USER
            echo 'user name $u'
            sudo chown -R $u /home/$u/
            npm i
            echo "After npm i"
            sudo npm install pm2 -g
            echo "After npm install pm2 -g"
            npm run migrations >> migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send database migration status to kvdb
          command: |
            if grep "has been executed successfully" ./backend/migrations_dump.txt;
            then
              echo "Database migration has been executed successfully"
              #curl -H "Content-Type: text/plain" -H "token: 7079126b-54c1-4ae1-b7cf-577d8a27c76f" --request PUT --data "success" https://api.memstash.io/values/DB_MIGRATION_STATUS_${CIRCLE_WORKFLOW_ID:0:7}
              curl https://kvdb.io/6mg2XrhaS7eJnBfS4ShcFz/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "Database migration has failed, verify DB setup!"
              #curl -H "Content-Type: text/plain" -H "token: 7079126b-54c1-4ae1-b7cf-577d8a27c76f" --request PUT --data "failure" https://api.memstash.io/values/DB_MIGRATION_STATUS_${CIRCLE_WORKFLOW_ID:0:7}
              curl https://kvdb.io/6mg2XrhaS7eJnBfS4ShcFz/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  deploy-frontend:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - attach_workspace:
          at: .
      - run:
          name: Get backend url and setup environment variables
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo ENVIRONMENT=production > "frontend/.env"
            echo API_URL=${API_URL} >> "frontend/.env"
            cat frontend/.env
      - run:
          name: Build frontend
          command: |
            cd ./frontend
            pwd
            npm i
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp ./frontend/dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - ./frontend/dist
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  deploy-backend:
    docker:
      # Docker image that supports Ansible
      - image: python:3.7-alpine3.11
    environment:
      PATH: "/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/.local/bin"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d5:55:3b:b1:b3:f7:4c:bd:2e:a3:df:92:64:f3:44:77"]
      - attach_workspace:
          at: .
      - restore_cache:
          key: backend-build
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh-client tar gzip curl nodejs npm
            apk add --no-cache --upgrade bash
            pip install --upgrade pip
            pip install awscli
      - run:
          name: Build backend .env file
          command: |
            pwd
            echo ENVIRONMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
      - run:
          name: Deploy backend
          no_output_timeout: 20m
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            pwd
            mkdir /tmp/workspace/
            tar -zcvf /tmp/workspace/backend.tar.gz ./
            tar -zcvf ./../../backend.tar.gz ./
            echo tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt deploy-backend.yml -vvv
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - create-env
      - run:
          name: Install dependencies
          command: |           
            pip install awscli
            apk add --update curl nodejs npm
      - run:
          name: Backend smoke test.
          working_directory: ./backend
          command: |
            # Fetch and prepare the BACKEND_IP env var
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            curl -s http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees | grep "Welcome"
            echo ${URL} 
            if curl -s http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
        
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Store old WorkflowID for cleanup phase
          command: |
            cat .circleci/files/workflowid.txt
            echo "export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate \
            --output text)" >> .circleci/files/workflowid.txt
            cat .circleci/files/workflowid.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/files/workflowid.txt
      - run:
          name: Update cloudfront distribution
          no_output_timeout: 20m
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name udapeople-cloudfront-production \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  cleanup:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh-client tar gzip curl nodejs npm
            apk add --no-cache --upgrade bash
            pip install --upgrade pip
            pip install awscli
      - run:
          name: Clean up old environment
          command: |
            source .circleci/files/workflowid.txt
            echo $OldWorkflowID
            CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}

            if [[ "$CurrentWorkflowID" != "$OldWorkflowID"]]
            then
              echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"

              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            else
              echo "$OldWorkflowID==$CurrentWorkflowID => nothing needs to be done..."
            fi

workflows:
  default:
    jobs:
      - build-frontend:
          context: slack
      - build-backend:
          context: slack
      # - test-frontend:
      #     requires: [build-frontend]
      #     context: slack
      # - test-backend:
      #     requires: [build-backend]
      #     context: slack
      # - scan-backend:
      #     requires: [build-backend]
      #     context: slack
      # - scan-frontend:
      #     requires: [build-frontend]
      #     context: slack
      - deploy-infrastructure:
          requires: [build-backend, build-frontend]
          #requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]